Part 2:

This part is about identifying many-many and 1-many relationships between classes. You will be tasked with first designing the relationships between each given set of classes and then designing a database structure to support them (like you did in Part 1).

1.

User:       Relationships:       Entitites:
            Comic                Writer,
            Issue                Artist


Each Issue belongs to one Comic.
Each Comic has many Issues.
Therefore there is a 1-to-many relationship between them.

Each Comic has many Writers.
Each Writer works on many Comics.
Therefore there is a many-to-many relationship between them.

Each Comic has many Artists.
Each Artist works on many Comics.
Therefore there is a many-to-many relationship between them.


Issue table:
id - integer    <--- Primary key
title - text
year - integer
comic_id - integer   <--- Foreign key

Comic table:
id - integer    <--- Primary key
series - text
genre - text

Comic_Writer table:
comic_id - integer   <--- Foreign key
writer_id - integer   <--- Foreign key

Comic_Artist table:
comic_id - integer   <--- Foreign key
artist_id - integer   <--- Foreign key

Writer table:
id - integer    <--- Primary key
name - text

Artist table:
id - integer    <--- Primary key
name - text




2.

User:       Relationships:       Entitites:
            Setlist              Instrument,
            Tour Date            Song


Each Song has many Instruments.
Each Instrument belongs in many Songs.
Therefore there is a many-to-many relationship between them.

Each Setlist can have many Songs.
Each Song can go into many Setlists.
Therefore there is a many-to-many relationship between them.

Each Tour Date can have a single Setlist.
Each Setlist can belong to many Tour Dates.
Therefore there is a 1-to-many relationship between them.


Instrument table:
id - integer    <--- Primary key
name - text
section - text

Instrument_Song table:
instrument_id - integer   <--- Foreign key
song_id - integer   <--- Foreign key

Song table:
id - integer    <--- Primary key
name - text
composer - text
year - integer
lyrics - large text

Setlist_Song table:
setlist_id - integer   <--- Foreign key
song_id - integer   <--- Foreign key

Setlist table:
id - integer    <--- Primary key
name - text
date - text or integer

Tour Date table:
id - integer    <--- Primary key
date - text or integer
location - text
setlist_id - integer   <--- Foreign key




3.

User:       Relationships:       Entitites:
            Artwork              Artist,
            Exhibit              Curator
            Gallery


Each Artwork has a single Artist.
Each Artist produces many Artworks.
Therefore there is a 1-to-many relationship between them.

Each Artwork belongs in a single Exhibit.
Each Exhibit has many Artworks.
Therefore there is a 1-to-many relationship between them.

Each Exhibit belongs to a single Gallery.
Each Gallery has many Exhibits.
Therefore there is a 1-to-many relationship between them.

Each Exhibit has many Curators.
Each Curator works on many Exhibits.
Therefore it is a many-to-many relationship between them.


Artist table:
id - integer    <--- Primary key
name - text
style - text

Artwork table:
id - integer    <--- Primary key
name - text
style - text
period - text
artist_id - integer   <--- Foreign key
exhibit_id - integer   <--- Foreign key

Exhibit table:
id - integer    <--- Primary key
theme - text
date - text or integer
gallery_id - integer   <--- Foreign key

Exhibit_Curators table:
exhibit_id - integer   <--- Foreign key
curator_id - integer   <--- Foreign key

Curator table:
id - integer    <--- Primary key
name - text

Gallery table:
id - integer    <--- Primary key
name - text
location - text
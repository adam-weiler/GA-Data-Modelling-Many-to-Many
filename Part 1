Part 1:

This part focuses on designing database structures to support many-many relationships as well as 1-many relationships. Your task is to design the database structure for the classes and relationships given below.

Think about what data types to use for each attribute as well as any other tables or columns you need in order to store these relationships.

1. Imagine an app that allows users to keep track of what films they've seen:

User:       Relationships:       Entitites:
Viewer                           Film


Each Film has many Viewers.
Each Viewer watched many Films.
Therefore there is a many-to-many relationship between them.


Viewer table:
id - integer    <--- Primary key
user_name - text
real_name - text
age - integer

Film_Viewer table:
id - integer    <--- Primary key
date_viewed - text or integer
film_id - integer   <--- Foreign key
viewer_id - integer   <--- Foreign key

Film table:
id - integer    <--- Primary key
title - text
director - text
year - integer




2. Imagine an app that allows workers to keep track of what shifts they've worked:

User:       Relationships:       Entitites:
Worker                           Shift


Each Shift has many Workers.
Each Worker performs many Shifts.
Therefore there is a many-to-many relationship between them.


Worker table:
id - integer    <--- Primary key
name - text
wage - text
position - text


Worker_Shift table:
id - integer    <--- Primary key
date_of_shift - text or integer
hours_worked - integer
over_time - boolean
worker_id - integer   <--- Foreign key
shift_id - integer   <--- Foreign key


Shift table:
id - integer    <--- Primary key
day - text
time - integer




3. Imagine an app that allows users to keep track of the books they've read:

User:       Relationships:       Entitites:
Reader      Book                 Author
            Chapter


Each Reader consumes many Books.
Each Book is enjoyed by many Readers.
Therefore there is a many-to-many relationship between them.

Each Chapter belongs to only 1 book.
Each Book has many Chapters.
Therefore there is a 1-to-many relationship between them.

Each Author writes many books.
Each Book can have many Authors.
Therefore there is a many-to-many relationship between them.


Reader table:
id - integer    <--- Primary key
user_name - text
real_name - text
age - integer
favourite_genre - text

Reader_Books table:
id - integer    <--- Primary key
reader_id - integer   <--- Foreign key
book_id - integer   <--- Foreign key

Book table:
id - integer    <--- Primary key
title - text
year - integer

Book_Authors table:
id - integer    <--- Primary key
book_id - integer   <--- Foreign key
authors_id - integer   <--- Foreign key

Chapter table:
id - integer    <--- Primary key
title - text
length - integer
summary - text
book_id - integer   <--- Foreign key

Author table:
id - integer    <--- Primary key
name - text
biography - long text
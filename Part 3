Part 3:

In this part you will be given just the concept of an app and you will have to design the classes, relationships, and database structure for it. You can keep things relatively simple and aim for somewhere around 2-5 classes per app.

1. A food delivery app that allows users to place orders for dishes from restaurants.

User:       Relationships:       Entitites:
Customer    Dish                 Restaurant


Each Dish belongs to one Customer.
Each Customer can order many Dishs.
Therefore there is a 1-to-many relationship between them.

Each Dish can be prepared at a single Restaurant.
Each Restaurant has many Dishes.

Therefore there is a 1-to-many relationship between them.




2. An app that airlines might use to keep track of the flights they have scheduled and who the passengers and crew are on each flight.

User:       Relationships:       Entitites:
Passenger   Flight               Crew
                                 Airline


Each Flight belongs to a single Airline.
Each Airline can have many Flights.
Therefore there is a 1-to-many relationship between them.

Each Flight has many Crew members.
Each Crew member can go on many Flights.
Therefore there is a many-to-many relationship between them.

Each Flight has many Passengers.
Each Passenger can go on many Flights.
Therefore there is a many-to-many relationship between them.



3. A music streaming app that allows artists to post tracks, and for listeners to subscribe to artists.

User:       Relationships:       Entitites:
Listener    Subscription         Artist
            Track


Each Track can belong to a single Artist.
Each Artist can post many Tracks.
Therefore there is a 1-to-many relationship between them.

Each Subscription belongs to a single Listener.
Each Listener can Subscribe to many Artists.
Therefore there is a many-to-many relationship between them.




4. Design the database structure to allow users to follow other users on social media (eg. Twitter).

User:       Relationships:       Entitites:
User        Followers
            Following


Each Followers list belongs to a single User.
Each User can be Followed many Users.
Therefore there is a 1-to-many relationship between them.

Each Following list belongs to a single User.
Each User can Follow many Users.
Therefore there is a 1-to-many relationship between them.




5. Design a database structure to allow users to request (and accept) to follow each other on social media (eg. Facebook).

User:       Relationships:       Entitites:
User        Friend Requests
            Friends


Each Friend Request list belongs to a single User.
Each User can have multiple Friend Requests.
Therefore there is a 1-to-many relationship between them.

Each Friends list belongs to a single User.
Each User can have multiple Friends.
Therefore there is a 1-to-many relationship between them.